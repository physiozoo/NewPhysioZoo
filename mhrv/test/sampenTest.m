%% Main function to generate tests
function tests = sampenTest
tests = functiontests(localfunctions);
end

%% Fixtures
function setupOnce(testCase)  % do not change function name
% Load input file
testdir = fileparts(mfilename('fullpath'));
resource_path = fullfile(testdir, 'resources', 'sampen');

testCase.TestData.resource_path = resource_path;
testCase.TestData.input_data = dlmread(fullfile(resource_path, 'test.10000'));

expected_line_pattern = 'SampEn(%d,%f,%*d) = %f';
expected_file1 = fopen(fullfile(resource_path, 'sampen_expected_m5_r02.txt'));
expected_file2 = fopen(fullfile(resource_path, 'sampen_expected_m5_r2.txt'));

testCase.TestData.expected1 = textscan(expected_file1, expected_line_pattern);
testCase.TestData.expected2 = textscan(expected_file2, expected_line_pattern);

fclose(expected_file1);
fclose(expected_file2);
end

function teardownOnce(testCase)  % do not change function name
end

function setup(testCase)  % do not change function name
end

function teardown(testCase)  % do not change function name
end


%% Test Functions

function testInputLength(testCase)
assert(length(testCase.TestData.input_data) == 10000);
end

function testSampen1(testCase)
sig = testCase.TestData.input_data;
expected = testCase.TestData.expected1;
compareSampEnAgainstExpected(sig, expected);
end

function testSampen2(testCase)
sig = testCase.TestData.input_data;
expected = testCase.TestData.expected2;
compareSampEnAgainstExpected(sig, expected);
end

function compareSampEnAgainstExpected(sig, expected)
m_ = expected{1};
r_ = expected{2};
expected_sampen_ = expected{3};

for ii = 1:length(m_)
    m = double(m_(ii));
    r = r_(ii);
    actual_sampen = mhrv.rri.sample_entropy(sig, m, r);
    
    assert(abs(actual_sampen - expected_sampen_(ii)) < 1e-6);
end
end